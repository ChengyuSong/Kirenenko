// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: rgd.proto
#ifndef GRPC_rgd_2eproto__INCLUDED
#define GRPC_rgd_2eproto__INCLUDED

#include "rgd.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace rgd {

class RGD final {
 public:
  static constexpr char const* service_full_name() {
    return "rgd.RGD";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status sendExpression(::grpc::ClientContext* context, const ::rgd::JitRequest& request, ::rgd::JitReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rgd::JitReply>> AsyncsendExpression(::grpc::ClientContext* context, const ::rgd::JitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rgd::JitReply>>(AsyncsendExpressionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rgd::JitReply>> PrepareAsyncsendExpression(::grpc::ClientContext* context, const ::rgd::JitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rgd::JitReply>>(PrepareAsyncsendExpressionRaw(context, request, cq));
    }
    virtual ::grpc::Status sendCmd(::grpc::ClientContext* context, const ::rgd::JitCmd& request, ::rgd::JitReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rgd::JitReply>> AsyncsendCmd(::grpc::ClientContext* context, const ::rgd::JitCmd& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rgd::JitReply>>(AsyncsendCmdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rgd::JitReply>> PrepareAsyncsendCmd(::grpc::ClientContext* context, const ::rgd::JitCmd& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rgd::JitReply>>(PrepareAsyncsendCmdRaw(context, request, cq));
    }
    virtual ::grpc::Status sendCmdv2(::grpc::ClientContext* context, const ::rgd::JitCmdv2& request, ::rgd::JitReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rgd::JitReply>> AsyncsendCmdv2(::grpc::ClientContext* context, const ::rgd::JitCmdv2& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rgd::JitReply>>(AsyncsendCmdv2Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rgd::JitReply>> PrepareAsyncsendCmdv2(::grpc::ClientContext* context, const ::rgd::JitCmdv2& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rgd::JitReply>>(PrepareAsyncsendCmdv2Raw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void sendExpression(::grpc::ClientContext* context, const ::rgd::JitRequest* request, ::rgd::JitReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void sendExpression(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rgd::JitReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void sendCmd(::grpc::ClientContext* context, const ::rgd::JitCmd* request, ::rgd::JitReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void sendCmd(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rgd::JitReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void sendCmdv2(::grpc::ClientContext* context, const ::rgd::JitCmdv2* request, ::rgd::JitReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void sendCmdv2(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rgd::JitReply* response, std::function<void(::grpc::Status)>) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rgd::JitReply>* AsyncsendExpressionRaw(::grpc::ClientContext* context, const ::rgd::JitRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rgd::JitReply>* PrepareAsyncsendExpressionRaw(::grpc::ClientContext* context, const ::rgd::JitRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rgd::JitReply>* AsyncsendCmdRaw(::grpc::ClientContext* context, const ::rgd::JitCmd& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rgd::JitReply>* PrepareAsyncsendCmdRaw(::grpc::ClientContext* context, const ::rgd::JitCmd& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rgd::JitReply>* AsyncsendCmdv2Raw(::grpc::ClientContext* context, const ::rgd::JitCmdv2& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rgd::JitReply>* PrepareAsyncsendCmdv2Raw(::grpc::ClientContext* context, const ::rgd::JitCmdv2& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status sendExpression(::grpc::ClientContext* context, const ::rgd::JitRequest& request, ::rgd::JitReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rgd::JitReply>> AsyncsendExpression(::grpc::ClientContext* context, const ::rgd::JitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rgd::JitReply>>(AsyncsendExpressionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rgd::JitReply>> PrepareAsyncsendExpression(::grpc::ClientContext* context, const ::rgd::JitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rgd::JitReply>>(PrepareAsyncsendExpressionRaw(context, request, cq));
    }
    ::grpc::Status sendCmd(::grpc::ClientContext* context, const ::rgd::JitCmd& request, ::rgd::JitReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rgd::JitReply>> AsyncsendCmd(::grpc::ClientContext* context, const ::rgd::JitCmd& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rgd::JitReply>>(AsyncsendCmdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rgd::JitReply>> PrepareAsyncsendCmd(::grpc::ClientContext* context, const ::rgd::JitCmd& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rgd::JitReply>>(PrepareAsyncsendCmdRaw(context, request, cq));
    }
    ::grpc::Status sendCmdv2(::grpc::ClientContext* context, const ::rgd::JitCmdv2& request, ::rgd::JitReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rgd::JitReply>> AsyncsendCmdv2(::grpc::ClientContext* context, const ::rgd::JitCmdv2& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rgd::JitReply>>(AsyncsendCmdv2Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rgd::JitReply>> PrepareAsyncsendCmdv2(::grpc::ClientContext* context, const ::rgd::JitCmdv2& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rgd::JitReply>>(PrepareAsyncsendCmdv2Raw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void sendExpression(::grpc::ClientContext* context, const ::rgd::JitRequest* request, ::rgd::JitReply* response, std::function<void(::grpc::Status)>) override;
      void sendExpression(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rgd::JitReply* response, std::function<void(::grpc::Status)>) override;
      void sendCmd(::grpc::ClientContext* context, const ::rgd::JitCmd* request, ::rgd::JitReply* response, std::function<void(::grpc::Status)>) override;
      void sendCmd(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rgd::JitReply* response, std::function<void(::grpc::Status)>) override;
      void sendCmdv2(::grpc::ClientContext* context, const ::rgd::JitCmdv2* request, ::rgd::JitReply* response, std::function<void(::grpc::Status)>) override;
      void sendCmdv2(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rgd::JitReply* response, std::function<void(::grpc::Status)>) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::rgd::JitReply>* AsyncsendExpressionRaw(::grpc::ClientContext* context, const ::rgd::JitRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rgd::JitReply>* PrepareAsyncsendExpressionRaw(::grpc::ClientContext* context, const ::rgd::JitRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rgd::JitReply>* AsyncsendCmdRaw(::grpc::ClientContext* context, const ::rgd::JitCmd& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rgd::JitReply>* PrepareAsyncsendCmdRaw(::grpc::ClientContext* context, const ::rgd::JitCmd& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rgd::JitReply>* AsyncsendCmdv2Raw(::grpc::ClientContext* context, const ::rgd::JitCmdv2& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rgd::JitReply>* PrepareAsyncsendCmdv2Raw(::grpc::ClientContext* context, const ::rgd::JitCmdv2& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_sendExpression_;
    const ::grpc::internal::RpcMethod rpcmethod_sendCmd_;
    const ::grpc::internal::RpcMethod rpcmethod_sendCmdv2_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status sendExpression(::grpc::ServerContext* context, const ::rgd::JitRequest* request, ::rgd::JitReply* response);
    virtual ::grpc::Status sendCmd(::grpc::ServerContext* context, const ::rgd::JitCmd* request, ::rgd::JitReply* response);
    virtual ::grpc::Status sendCmdv2(::grpc::ServerContext* context, const ::rgd::JitCmdv2* request, ::rgd::JitReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_sendExpression : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_sendExpression() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_sendExpression() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendExpression(::grpc::ServerContext* context, const ::rgd::JitRequest* request, ::rgd::JitReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsendExpression(::grpc::ServerContext* context, ::rgd::JitRequest* request, ::grpc::ServerAsyncResponseWriter< ::rgd::JitReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_sendCmd : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_sendCmd() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_sendCmd() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendCmd(::grpc::ServerContext* context, const ::rgd::JitCmd* request, ::rgd::JitReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsendCmd(::grpc::ServerContext* context, ::rgd::JitCmd* request, ::grpc::ServerAsyncResponseWriter< ::rgd::JitReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_sendCmdv2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_sendCmdv2() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_sendCmdv2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendCmdv2(::grpc::ServerContext* context, const ::rgd::JitCmdv2* request, ::rgd::JitReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsendCmdv2(::grpc::ServerContext* context, ::rgd::JitCmdv2* request, ::grpc::ServerAsyncResponseWriter< ::rgd::JitReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_sendExpression<WithAsyncMethod_sendCmd<WithAsyncMethod_sendCmdv2<Service > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_sendExpression : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_sendExpression() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::rgd::JitRequest, ::rgd::JitReply>(
          [this](::grpc::ServerContext* context,
                 const ::rgd::JitRequest* request,
                 ::rgd::JitReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->sendExpression(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_sendExpression() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendExpression(::grpc::ServerContext* context, const ::rgd::JitRequest* request, ::rgd::JitReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void sendExpression(::grpc::ServerContext* context, const ::rgd::JitRequest* request, ::rgd::JitReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_sendCmd : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_sendCmd() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::rgd::JitCmd, ::rgd::JitReply>(
          [this](::grpc::ServerContext* context,
                 const ::rgd::JitCmd* request,
                 ::rgd::JitReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->sendCmd(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_sendCmd() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendCmd(::grpc::ServerContext* context, const ::rgd::JitCmd* request, ::rgd::JitReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void sendCmd(::grpc::ServerContext* context, const ::rgd::JitCmd* request, ::rgd::JitReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_sendCmdv2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_sendCmdv2() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::rgd::JitCmdv2, ::rgd::JitReply>(
          [this](::grpc::ServerContext* context,
                 const ::rgd::JitCmdv2* request,
                 ::rgd::JitReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->sendCmdv2(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_sendCmdv2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendCmdv2(::grpc::ServerContext* context, const ::rgd::JitCmdv2* request, ::rgd::JitReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void sendCmdv2(::grpc::ServerContext* context, const ::rgd::JitCmdv2* request, ::rgd::JitReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_sendExpression<ExperimentalWithCallbackMethod_sendCmd<ExperimentalWithCallbackMethod_sendCmdv2<Service > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_sendExpression : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_sendExpression() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_sendExpression() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendExpression(::grpc::ServerContext* context, const ::rgd::JitRequest* request, ::rgd::JitReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_sendCmd : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_sendCmd() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_sendCmd() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendCmd(::grpc::ServerContext* context, const ::rgd::JitCmd* request, ::rgd::JitReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_sendCmdv2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_sendCmdv2() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_sendCmdv2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendCmdv2(::grpc::ServerContext* context, const ::rgd::JitCmdv2* request, ::rgd::JitReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_sendExpression : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_sendExpression() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_sendExpression() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendExpression(::grpc::ServerContext* context, const ::rgd::JitRequest* request, ::rgd::JitReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsendExpression(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_sendCmd : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_sendCmd() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_sendCmd() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendCmd(::grpc::ServerContext* context, const ::rgd::JitCmd* request, ::rgd::JitReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsendCmd(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_sendCmdv2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_sendCmdv2() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_sendCmdv2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendCmdv2(::grpc::ServerContext* context, const ::rgd::JitCmdv2* request, ::rgd::JitReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsendCmdv2(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_sendExpression : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_sendExpression() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->sendExpression(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_sendExpression() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendExpression(::grpc::ServerContext* context, const ::rgd::JitRequest* request, ::rgd::JitReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void sendExpression(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_sendCmd : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_sendCmd() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->sendCmd(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_sendCmd() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendCmd(::grpc::ServerContext* context, const ::rgd::JitCmd* request, ::rgd::JitReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void sendCmd(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_sendCmdv2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_sendCmdv2() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->sendCmdv2(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_sendCmdv2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendCmdv2(::grpc::ServerContext* context, const ::rgd::JitCmdv2* request, ::rgd::JitReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void sendCmdv2(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_sendExpression : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_sendExpression() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::rgd::JitRequest, ::rgd::JitReply>(std::bind(&WithStreamedUnaryMethod_sendExpression<BaseClass>::StreamedsendExpression, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_sendExpression() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status sendExpression(::grpc::ServerContext* context, const ::rgd::JitRequest* request, ::rgd::JitReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedsendExpression(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rgd::JitRequest,::rgd::JitReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_sendCmd : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_sendCmd() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::rgd::JitCmd, ::rgd::JitReply>(std::bind(&WithStreamedUnaryMethod_sendCmd<BaseClass>::StreamedsendCmd, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_sendCmd() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status sendCmd(::grpc::ServerContext* context, const ::rgd::JitCmd* request, ::rgd::JitReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedsendCmd(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rgd::JitCmd,::rgd::JitReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_sendCmdv2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_sendCmdv2() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::rgd::JitCmdv2, ::rgd::JitReply>(std::bind(&WithStreamedUnaryMethod_sendCmdv2<BaseClass>::StreamedsendCmdv2, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_sendCmdv2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status sendCmdv2(::grpc::ServerContext* context, const ::rgd::JitCmdv2* request, ::rgd::JitReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedsendCmdv2(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rgd::JitCmdv2,::rgd::JitReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_sendExpression<WithStreamedUnaryMethod_sendCmd<WithStreamedUnaryMethod_sendCmdv2<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_sendExpression<WithStreamedUnaryMethod_sendCmd<WithStreamedUnaryMethod_sendCmdv2<Service > > > StreamedService;
};

}  // namespace rgd


#endif  // GRPC_rgd_2eproto__INCLUDED
